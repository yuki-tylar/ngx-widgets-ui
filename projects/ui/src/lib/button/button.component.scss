@import "../assets/_general";
@import "../assets/color";

:host{
  font-size: 14px;
  color: inherit;
  border-color: inherit;
}

.button-container{
  font-size: inherit;
  border-color: inherit;
  color: inherit;
}

button{
  position: relative;
  font-size: 1em;
  line-height: 1em;
  color: inherit;
  border-color: inherit;
  overflow: hidden;
  border-width: 1px;
  border-style: solid;
}

/** border class | bg class*/
button{
  .appearance-flat & { background: none!important; border: none!important; }
  .appearance-pill & { border-radius: 100px; }
  .appearance-default &,
  .appearance-rounded & { border-radius: 0.3em; }
  
  @for $i from 1 through 20 {
    .appearance-rounded-#{$i} & { border-radius: #{$i}px; }
  }
}

/** padding class*/
button{
  padding: 0.4em 1.2em;

  &.icon-only{ padding: 0.5em; }
}

/** inner style */
button{
  display: inline-flex;
  align-items: center;

  .icon{ font-size: 1.5em; }
  .icon+.label{ padding-left: 0.38em; }

  .icon, .label{ position: relative; }

  .bg{
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

button.pushing{ 
  transform: scale(0.98); 
  transform-origin: center;
}

.animate{
  transition-property: color, border-color, background-color;
  transition-duration: 300ms;
}

$colorBorderActive: var(--ngx-item-accent, $blue);
$colorBorderActiveDark: var(--ngx-item-accent-dark, $yellow);

$colorBG: var(--ngx-item-primary, transparent);
$colorBGActive: var(--ngx-item-accent, $blue);

$colorBGDark: var(--ngx-item-primary-dark, transparent);
$colorBGActiveDark: var(--ngx-item-accent-dark, $yellow);

$colorText: var(--ngx-item-accent, $blue);
$colorTextActive: var(--ngx-item-on-accent, white);

$colorTextDark: var(--ngx-item-accent-dark, $yellow);
$colorTextActiveDark: var(--ngx-item-on-accent-dark, black);

.state-change-default.appearance-flat{
  .color-text{
    color: inherit;
    &.on{ 
      color: $colorBGActive; 
      @each $name, $value in $presetColors { &.#{$name} { color: map-get($value, 'bg'); } }
    }
  }
}
.state-change-default.appearance-flat.ngx-dark{
  .color-text{
    &.on{ 
      color: $colorBGActiveDark; 
      @each $name, $value in $presetColors { &.#{$name} { color: map-get($value, 'bg'); } }
    }
  }
}
.state-change-default.appearance-flat.ngx-dark-auto{ @media (prefers-color-scheme: dark){
  .color-text{
    &.on{ 
      color: $colorBGActiveDark; 
      @each $name, $value in $presetColors { &.#{$name} { color: map-get($value, 'bg'); } }
    }
  }
}}
.state-change-invert.appearance-flat{
  .color-text{
    color: $colorBGActive;
    @each $name, $value in $presetColors { &.#{$name} { color: map-get($value, 'bg'); } }
  }
}
.state-change-invert.appearance-flat.ngx-dark{
  .color-text{
    color: $colorBGActiveDark;
    @each $name, $value in $presetColors { &.#{$name} { color: map-get($value, 'bg'); } }
  }
}
.state-change-invert.appearance-flat.ngx-dark-auto{ @media (prefers-color-scheme: dark){
  .color-text{
    color: $colorBGActiveDark;
    @each $name, $value in $presetColors { &.#{$name} { color: map-get($value, 'bg'); } }
  }
}}


.state-change-default:not(.appearance-flat){
  .color-button{
      background: none; 
      border-color: inherit;
    &.on{ 
      background: $colorBGActive; 
      border-color: $colorBorderActive;
      @each $name, $value in $presetColors { 
        &.#{$name} { 
          background: map-get($value, 'bg'); 
          border-color: map-get($value, 'bg'); 
        } 
      }
    }
  }
  .color-text{
    color: inherit;
    &.on{ 
      color: $colorTextActive;
      @each $name, $value in $presetColors { &.#{$name} { color: map-get($value, 'text'); }}
    }
  }
}
.state-change-default:not(.appearance-flat).ngx-dark{
  .color-button{
    background: none; 
    border-color: inherit;
    &.on{ 
      background: $colorBGActiveDark; 
      border-color: $colorBorderActiveDark;
      @each $name, $value in $presetColors { 
        &.#{$name} { 
          background: map-get($value, 'bg'); 
          border-color: map-get($value, 'bg'); 
        } 
      }
    }
  }
  .color-text{
    color: inherit;
    &.on{ 
      color: $colorTextActiveDark; 
      @each $name, $value in $presetColors { &.#{$name} { color: map-get($value, 'text'); }}
    }
  }
}
.state-change-default:not(.appearance-flat).ngx-dark-auto{ @media (prefers-color-scheme: dark){
  .color-button{
    background: 
    none; border-color: inherit;
    &.on{ 
      background: $colorBGActiveDark; 
      border-color: $colorBorderActiveDark; 
      @each $name, $value in $presetColors { 
        &.#{$name} { 
          background: map-get($value, 'bg'); 
          border-color: map-get($value, 'bg'); 
        } 
      }
    }
  }
  .color-text{
    color: inherit;
    &.on{ 
      color: $colorTextActiveDark; 
      @each $name, $value in $presetColors { &.#{$name} { color: map-get($value, 'text'); }}
    }
  }
}}

.state-change-invert:not(.appearance-flat){
  .color-button{
    background: $colorBG;       
    border-color: $colorBGActive;
    @each $name, $value in $presetColors { &.#{$name} { border-color: map-get($value, 'bg'); }}
    &.on{ 
      background: $colorBGActive; 
      border-color: $colorBGActive; 
      @each $name, $value in $presetColors { 
        &.#{$name} { 
          border-color: map-get($value, 'bg'); 
          background: map-get($value, 'bg'); 
        }
      }
    }
  }
  .color-text{
    color: $colorBGActive;
    @each $name, $value in $presetColors { &.#{$name} { color: map-get($value, 'bg'); }}
    &.on{ 
      color: $colorTextActive;
      @each $name, $value in $presetColors { &.#{$name} { color: map-get($value, 'text'); }}
    }
  }
}
.state-change-invert:not(.appearance-flat).ngx-dark{
  .color-button{
    background: $colorBGDark;       
    border-color: $colorBGActiveDark;
    @each $name, $value in $presetColors {  &.#{$name} { border-color: map-get($value, 'bg'); }}

    &.on{ 
      background: $colorBGActiveDark; 
      border-color: $colorBGActiveDark; 
      @each $name, $value in $presetColors {  
        &.#{$name} { 
          border-color: map-get($value, 'bg');
          background: map-get($value, 'bg');
        }
      }
    }
  }
  .color-text{
    color: $colorBGActiveDark;
    @each $name, $value in $presetColors {  &.#{$name} { color: map-get($value, 'bg'); }}

    &.on{ 
      color: $colorTextActiveDark; 
      @each $name, $value in $presetColors {  &.#{$name} { color: map-get($value, 'text'); }}
    }
  }
}
.state-change-invert:not(.appearance-flat).ngx-dark-auto{ @media (prefers-color-scheme: dark){
  .color-button{
    background: $colorBGDark;       
    border-color: $colorBGActiveDark;
    @each $name, $value in $presetColors {  &.#{$name} { border-color: map-get($value, 'bg'); }}

    &.on{ 
      background: $colorBGActiveDark; 
      border-color: $colorBGActiveDark; 
      @each $name, $value in $presetColors {  
        &.#{$name} { 
          border-color: map-get($value, 'bg');
          background: map-get($value, 'bg');
        }
      }
    }
  }
  .color-text{
    color: $colorBGActiveDark;
    @each $name, $value in $presetColors {  &.#{$name} { color: map-get($value, 'bg'); }}

    &.on{ 
      color: $colorTextActiveDark; 
      @each $name, $value in $presetColors {  &.#{$name} { color: map-get($value, 'text'); }}
    }
  }
}}